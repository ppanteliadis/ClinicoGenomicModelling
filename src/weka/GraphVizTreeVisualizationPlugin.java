package weka;
/*
 *   This program is free software: you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation, either version 3 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * GraphVizTreeVisualizationPlugin.java
 * Copyright (C) 2014 University of Waikato, Hamilton, New Zealand
 */


import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JScrollPane;

import weka.gui.visualize.plugins.TreeVisualizePlugin;

/**
 * Displays a graph image generated by GraphViz from the dotty notation that
 * we get from the Explorer.
 * 
 * @author  fracpete (fracpete at waikato dot ac dot nz)
 * @version $Revision$
 */
public class GraphVizTreeVisualizationPlugin implements TreeVisualizePlugin {

  /**
   * Get a JMenu or JMenuItem which contain action listeners
   * that perform the visualization of the tree in GraphViz's dotty format.  
   * Exceptions thrown because of changes in Weka since compilation need to 
   * be caught by the implementer.
   *
   * @see NoClassDefFoundError
   * @see IncompatibleClassChangeError
   *
   * @param dotty 	the tree in dotty format
   * @param name	the name of the item (in the Explorer's history list)
   * @return menuitem 	for opening visualization(s), or null
   *         		to indicate no visualization is applicable for the input
   */
  public JMenuItem getVisualizeMenuItem(final String dotty, final String name) {
    JMenuItem	result;
    
    result = new JMenuItem("Visualize tree (GraphViz)");
    result.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
	final GraphVizPanel panel = new GraphVizPanel();
	panel.setDotty(dotty);
	JScrollPane pane = new JScrollPane(panel);
	pane.getVerticalScrollBar().setUnitIncrement(20);
	pane.getHorizontalScrollBar().setUnitIncrement(20);
	pane.getVerticalScrollBar().setBlockIncrement(100);
	pane.getHorizontalScrollBar().setBlockIncrement(100);
	pane.setWheelScrollingEnabled(true);
	final JFrame jf = new JFrame("Tree for " + name);
	jf.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	jf.setSize(800,600);
	jf.getContentPane().setLayout(new BorderLayout());
	jf.getContentPane().add(pane, BorderLayout.CENTER);
	jf.setLocationRelativeTo(null);
	JMenuBar menubar = new JMenuBar();
	JMenu menu = new JMenu("File");
	menubar.add(menu);
	JMenuItem menuitem = new JMenuItem("Save as...");
	menuitem.addActionListener(new ActionListener() {
	  @Override
	  public void actionPerformed(ActionEvent e) {
	    panel.saveComponent();
	  }
	});
	menu.add(menuitem);
	menu.addSeparator();
	menuitem = new JMenuItem("Close");
	menuitem.addActionListener(new ActionListener() {
	  @Override
	  public void actionPerformed(ActionEvent e) {
	    jf.setVisible(false);
	    jf.dispose();
	  }
	});
	menu.add(menuitem);
	jf.setJMenuBar(menubar);
	jf.setVisible(true);
      }
    });
    
    return result;
  }
  
  /**
   * Get the minimum version of Weka, inclusive, the class
   * is designed to work with.  eg: <code>3.5.0</code>
   * 
   * @return		the minimum version
   */
  public String getMinVersion() {
    return "3.7.9";
  }
  
  /**
   * Get the maximum version of Weka, exclusive, the class
   * is designed to work with.  eg: <code>3.6.0</code>
   * 
   * @return		the maximum version
   */
  public String getMaxVersion() {
    return "3.8.0";
  }
  
  /**
   * Get the specific version of Weka the class is designed for.
   * eg: <code>3.5.1</code>
   * 
   * @return		the version the plugin was designed for
   */
  public String getDesignVersion() {
    return "3.7.11";
  }
}
